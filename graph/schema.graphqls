type Query {
  fetchPortfolio(id: ID!): Portfolio
  fetchPortfolios: [Portfolio!]!
}

type Mutation {
  addAssetToPortfolio(
    input: AddAssetToPortfolioInput!
  ): AddAssetToPortfolioPayload

  addPortfolioTransaction(
    input: AddPortfolioTransactionInput!
  ): AddPortfolioTransactionPayload

  createPortfolio(
    input: CreatePortfolioInput!
  ): CreatePortfolioPayload
}

enum TransactionTypeEnum {
  BUY
  SELL
}

type Portfolio {
  id: ID!
  name: String!
  portfolioAssets: [PortfolioAsset!]!
}

type PortfolioAsset {
  id: ID!
  name: String!
  portfolio: Portfolio!
  portfolioId: ID!
  portfolioTransactions: [PortfolioTransaction!]!
  symbol: String!
}

type PortfolioTransaction {
  fee: Float!
  id: ID!
  notes: String
  portfolioAsset: PortfolioAsset!
  portfolioAssetId: ID!
  price: Float!
  quantity: Float!
  transactionType: TransactionTypeEnum!
}

input CreatePortfolioInput {
  clientMutationId: String
  name: String!
}

type CreatePortfolioPayload {
  clientMutationId: String
  errors: [String!]!
  portfolio: Portfolio
}

input AddAssetToPortfolioInput {
  clientMutationId: String
  name: String!
  portfolioId: ID!
  symbol: String!
}

type AddAssetToPortfolioPayload {
  asset: PortfolioAsset
  clientMutationId: String
  errors: [String!]!
}

input AddPortfolioTransactionInput {
  clientMutationId: String
  fee: String!
  notes: String
  portfolioAssetId: ID!
  price: String!
  quantity: String!
  transactionType: TransactionTypeEnum!
}

type AddPortfolioTransactionPayload {
  clientMutationId: String
  errors: [String!]!
  transaction: PortfolioTransaction
}